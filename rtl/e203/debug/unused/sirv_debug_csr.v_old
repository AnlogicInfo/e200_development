//=====================================================================
//--        _______   ___
//--       (   ____/ /__/
//--        \ \     __
//--     ____\ \   / /
//--    /_______\ /_/   MICROELECTRONICS
//--
//=====================================================================
//
// Designer   : Bob Hu
//
// Description:
//  The module to implement the core's debug control and relevant CSRs
//
// ===========================================================================

module sirv_debug_csr 
#(
    parameter PC_SIZE = 32 
)(

    // The interface with commit stage
  input  [PC_SIZE-1:0] cmt_dpc,
  input  cmt_dpc_ena,

  input  [3-1:0] cmt_dcause,
  input  cmt_dcause_ena,

  input  dbg_irq_r,

    // The interface with CSR control 
  input  wr_tselect_ena ,
  input  wr_tdata1_ena  ,
  input  wr_tdata2_ena  ,
  input  wr_dcsr_ena    ,
  input  wr_dpc_ena     ,
  input  wr_dscratch_ena,

  input  [32-1:0] wr_csr_nxt    ,

  output[32-1:0] tdata1_r,
  output[32-1:0] tdata2_r,
  output[32-1:0] tselect_r    ,
  output[32-1:0] dcsr_r    ,
  output[PC_SIZE-1:0] dpc_r     ,
  output[32-1:0] dscratch_r,

  output dbg_mode,
  output dbg_halt_r,
  output dbg_step_r,
  output dbg_ebreakm_r,
  output dbg_stopcycle,

  output[PC_SIZE-1:0] dbg_mtpc0,
  output[PC_SIZE-1:0] dbg_mtpc1,
  output         dbg_mtpc0_ena,
  output         dbg_mtpc1_ena,

  input  clk,
  input  rst_n
  );


// Implement DPC reg
  wire dpc_ena = wr_dpc_ena | cmt_dpc_ena;
  wire [PC_SIZE-1:0] dpc_nxt;
  assign dpc_nxt[PC_SIZE-1:1] = 
       cmt_dpc_ena ? cmt_dpc[PC_SIZE-1:1] 
                   : wr_csr_nxt[PC_SIZE-1:1];
  assign dpc_nxt[0] = 1'b0; 
  sirv_gnrl_dfflr #(PC_SIZE) dpc_dfflr (dpc_ena, dpc_nxt, dpc_r, clk, rst_n);
  
// Implement Dbg Scratch reg
  wire dscratch_ena = wr_dscratch_ena;
  wire [32-1:0] dscratch_nxt;
  assign dscratch_nxt = wr_csr_nxt;
  sirv_gnrl_dfflr #(32) dscratch_dfflr (dscratch_ena, dscratch_nxt, dscratch_r, clk, rst_n);
 
// Implement Dbg tselect reg
  wire tselect_ena = wr_tselect_ena;
  wire tselect_nxt = wr_csr_nxt[0];
  sirv_gnrl_dfflr #(1) tselect_dfflr (tselect_ena, tselect_nxt, tselect_r[0], clk, rst_n);
  assign tselect_r[31:1] = 31'b0;


  wire[6:3] tdata1_0_r;
  wire[6:3] tdata1_1_r;
  assign tdata1_0_r[5:4] = 2'b0;
  assign tdata1_1_r[5:4] = 2'b0;

  assign tdata1_r[32-1:32-4] = 4'd2;// Type, always 2: The trigger is an address/data match trigger.
  assign tdata1_r[32-5]      = 1'd1;// dmode, always 1: Only Debug Mode can write the
                                    //     tdata registers at the selected tselect.
                                    //     Writes from other modes are ignored.
                                    //     This bit is only writable from Debug
                                    //     Mode.
  assign tdata1_r[32-6:32-11]= 6'd0;// maskmax, always 0: A value of 0 indicates
                                    //     that only exact value matches are supported (one byte range).
  assign tdata1_r[20]        = 1'd0;// Not used bit
  assign tdata1_r[19]        = 1'd0;// select, always 0: Perform a match on the address.
  assign tdata1_r[18]        = 1'd0;// Timing, always 0: The action for this trigger will be
                                    //     taken just before the instruction that
                                    //     triggered it is executed, but after all pre-
                                    //     ceding instructions are are committed.
  assign tdata1_r[17:12]     = 6'd1;// Action, always 1: Enter Debug Mode. (Only supported when dmode is 1.)
  assign tdata1_r[11]        = 1'd0;// Chain, always 0: When this trigger matches, the congured action is taken.
  assign tdata1_r[10:7]      = 4'd0;// Match, always 0: Matches when the value equals tdata2.
  assign tdata1_r[6]         = (tselect_r[0] == 1'b0) ? tdata1_0_r[6] : tdata1_1_r[6];
                                    // M : When set, enable this trigger in M mode.
  assign tdata1_r[5:4]       = 2'b11;// H/S, always 1: When set, enable this trigger in H/S mode.
  assign tdata1_r[3]         = (tselect_r[0] == 1'b0) ? tdata1_0_r[3] : tdata1_1_r[3];
                                    // U : When set, enable this trigger in U mode.
  assign tdata1_r[2]         = 1'd1;// execute, always 1: When set, the trigger fire on the
                                    //     address or opcode of an instruction that is executed.
  assign tdata1_r[1:0]       = 2'd0;// store/load, always 0: When set, the trigger fire on the address or data of a store or load.

// Implement Dbg tdata2-0 reg
  wire tdata2_0_ena = wr_tdata2_ena & (tselect_r[0] == 1'b0);
  wire [31:0] tdata2_0_r;
  sirv_gnrl_dfflr #(32) tdata2_0_dfflr (tdata2_0_ena, wr_csr_nxt, tdata2_0_r, clk, rst_n);

// Implement Dbg tdata2-1 reg
  wire tdata2_1_ena = wr_tdata2_ena & (tselect_r[0] == 1'b1);
  wire [31:0] tdata2_1_r;
  sirv_gnrl_dfflr #(32) tdata2_1_dfflr (tdata2_1_ena, wr_csr_nxt, tdata2_1_r, clk, rst_n);

  assign tdata2_r = (tselect_r[0] == 1'b0) ? tdata2_0_r : tdata2_1_r;

  assign dbg_mtpc0 = tdata2_0_r[PC_SIZE-1:0];
  assign dbg_mtpc1 = tdata2_1_r[PC_SIZE-1:0];
  assign dbg_mtpc0_ena =tdata1_0_r[6];
  assign dbg_mtpc1_ena =tdata1_1_r[6];

// Implement Dbg tdata1-0 reg
  wire tdata1_0_ena = wr_tdata1_ena & (tselect_r[0] == 1'b0);
  sirv_gnrl_dfflr #(1) tdata1_0_3_dfflr (tdata1_0_ena, wr_csr_nxt[3], tdata1_0_r[3], clk, rst_n);
  sirv_gnrl_dfflr #(1) tdata1_0_6_dfflr (tdata1_0_ena, wr_csr_nxt[6], tdata1_0_r[6], clk, rst_n);

// Implement Dbg tdata1-1 reg
  wire tdata1_1_ena = wr_tdata1_ena & (tselect_r[0] == 1'b1);
  sirv_gnrl_dfflr #(1) tdata1_1_3_dfflr (tdata1_1_ena, wr_csr_nxt[3], tdata1_1_r[3], clk, rst_n);
  sirv_gnrl_dfflr #(1) tdata1_1_6_dfflr (tdata1_1_ena, wr_csr_nxt[6], tdata1_1_r[6], clk, rst_n);

// Implement dcsr reg
    //
    // The ndreset field
  wire ndreset_ena = wr_dcsr_ena & wr_csr_nxt[29];
  wire ndreset_nxt;
  wire ndreset_r;
  assign ndreset_nxt = wr_csr_nxt[29];
  sirv_gnrl_dfflr #(1) ndreset_dfflr (ndreset_ena, ndreset_nxt, ndreset_r, clk, rst_n);
  // This bit is not used as rocket impelmentation
    //
    // The fullreset field
  wire fullreset_ena = wr_dcsr_ena & wr_csr_nxt[28];
  wire fullreset_nxt;
  wire fullreset_r;
  assign fullreset_nxt = wr_csr_nxt[28];
  sirv_gnrl_dfflr #(1) fullreset_dfflr (fullreset_ena, fullreset_nxt, fullreset_r, clk, rst_n);
  // This bit is not used as rocket impelmentation
    //
    // The cause field
  wire dcause_ena = cmt_dcause_ena;
  wire [3-1:0] dcause_r;
  wire [3-1:0] dcause_nxt = cmt_dcause;
  sirv_gnrl_dfflr #(3) dcause_dfflr (dcause_ena, dcause_nxt, dcause_r, clk, rst_n);
    //
    // The halt field
  wire halt_ena = wr_dcsr_ena;
  wire halt_nxt;
  wire halt_r;
  assign halt_nxt = wr_csr_nxt[3];
  sirv_gnrl_dfflr #(1) halt_dfflr (halt_ena, halt_nxt, halt_r, clk, rst_n);
    //
    // The step field
  wire step_ena = wr_dcsr_ena;
  wire step_nxt;
  wire step_r;
  assign step_nxt = wr_csr_nxt[2];
  sirv_gnrl_dfflr #(1) step_dfflr (step_ena, step_nxt, step_r, clk, rst_n);
    //
    // The ebreakm field
  wire ebreakm_ena = wr_dcsr_ena;
  wire ebreakm_nxt;
  wire ebreakm_r;
  assign ebreakm_nxt = wr_csr_nxt[15];
  sirv_gnrl_dfflr #(1) ebreakm_dfflr (ebreakm_ena, ebreakm_nxt, ebreakm_r, clk, rst_n);
    //
    // The stopcycle field
  wire stopcycle_ena = wr_dcsr_ena;
  wire stopcycle_nxt;
  wire stopcycle_r;
  assign stopcycle_nxt = wr_csr_nxt[10];
  sirv_gnrl_dfflr #(1) stopcycle_dfflr (stopcycle_ena, stopcycle_nxt, stopcycle_r, clk, rst_n);
    //
    // The stoptime field
  wire stoptime_ena = wr_dcsr_ena;
  wire stoptime_nxt;
  wire stoptime_r;
  assign stoptime_nxt = wr_csr_nxt[9];
  sirv_gnrl_dfflr #(1) stoptime_dfflr (stoptime_ena, stoptime_nxt, stoptime_r, clk, rst_n);

  assign dbg_stopcycle = 1'b1; 

  assign dcsr_r [31:30] = 2'd1;
  assign dcsr_r [29:16]  = 14'b0;
  assign dcsr_r [15:12]  = {4{ebreakm_r}};// we replicated the ebreakm for all ebreakh/s/u
  assign dcsr_r [11]  = 1'b0;
  assign dcsr_r [10]    = dbg_stopcycle;// Not writeable this bit is constant
  assign dcsr_r [9]     = 1'b0;//stoptime_r; Not use this bit same as rocket implmementation
  assign dcsr_r [8:6]   = dcause_r; 
  assign dcsr_r [5]     = dbg_irq_r; 
  assign dcsr_r [4]   = 1'b0;
  assign dcsr_r [3]   = halt_r;
  assign dcsr_r [2]   = step_r;
  assign dcsr_r [1:0]   = 2'b11;

  assign dbg_mode = ~(dcause_r == 3'b0);


  assign dbg_halt_r = halt_r;
  assign dbg_step_r = step_r;
  assign dbg_ebreakm_r = ebreakm_r;


endmodule

